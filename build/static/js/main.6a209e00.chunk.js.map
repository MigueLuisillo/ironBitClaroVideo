{"version":3,"sources":["history.js","App.js","serviceWorker.js","containers/MoviesCatalog/MoviesCatalog.ducks.js","reducers/index.js","store/index.js","index.js"],"names":["createBrowserHistory","App","history","className","exact","path","component","MoviesCatalog","Boolean","window","location","hostname","match","initialState","movies","reducer","state","action","type","payload","combineReducers","moviesCatalog","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAEeA,gBCcAC,MAVf,WACE,OACE,kBAAC,IAAD,CAAQC,QAASA,GACf,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,SCErBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCTAC,G,kBAAe,CACnBC,OAAQ,KA8BKC,EA1BC,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAChD,OAAQA,EAAOC,MACb,IATyB,wCASG,IAClBJ,EAAWG,EAAOE,QAAlBL,OACR,MAAO,CACLA,UAGJ,QAAS,OAAOE,IChBLI,cAAgB,CAC7BC,kBCFIC,EAAmBb,OAAOc,sCAAwCC,IAWzDC,EATDC,YACZC,EACAL,EACEM,YACEC,OCINC,IAASC,OAAO,mBAPF,kBACZ,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,SAKY,MAAWO,SAASC,eAAe,SJkH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a209e00.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport MoviesCatalog from './containers/MoviesCatalog';\nimport './App.css';\nimport history from './history';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={MoviesCatalog} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint no-use-before-define: 0 */\nimport axios from 'axios';\nimport { apiBaseUrl } from '../../config/api';\n\n// Actions\nconst FETCH_MOVIES = 'cc/createRegimen/FETCH_MOVIES';\nconst FETCH_MOVIES_FAIL = 'cc/createRegimen/FETCH_MOVIES_FAIL';\nconst FETCH_MOVIES_SUCCESS = 'cc/createRegimen/FETCH_MOVIES_SUCCESS';\n\nconst initialState = {\n  movies: [],\n};\n\n// Reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_MOVIES_SUCCESS: {\n      const { movies } = action.payload;\n      return {\n        movies,\n      };\n    }\n    default: return state;\n  }\n};\n\n// Action Creators\n\nconst fetchMovies = (payload) => async (dispatch) => {\n  dispatch({ type: FETCH_MOVIES, payload });\n  const response = await axios.get(`${apiBaseUrl}/services//content//list?quantity=40&order_way=DESC&order_id=200&level_id=GPS&from=0&node_id=43861&region=mexico?api_version=v5.86&authpn=webclient&authpt=tfg1h3j4k6fd7&format=json&region=mexico&device_id=web&device_category=web&device_model=web&device_type=web&device_manufacturer=generic&HKS=9s5hqq76r3g6sg4jb90l38us52`);\n  dispatch(fetchMoviesSuccess({ movies: response.data.response.groups }));\n};\nconst fetchMoviesSuccess = (payload) => (dispatch) => {\n  dispatch({ type: FETCH_MOVIES_SUCCESS, payload });\n};\nconst fetchMoviesFail = (payload) => (dispatch) => {\n  dispatch({ type: FETCH_MOVIES_FAIL, payload });\n};\n\nexport default reducer;\nexport {\n  // Actions\n  FETCH_MOVIES,\n  FETCH_MOVIES_FAIL,\n  FETCH_MOVIES_SUCCESS,\n\n  // Action Creators\n  fetchMovies,\n  fetchMoviesFail,\n  fetchMoviesSuccess,\n};\n","import { combineReducers } from 'redux';\n\n// ducks pattern\nimport moviesCatalog from '../containers/MoviesCatalog/MoviesCatalog.ducks';\n\n\nexport default combineReducers({\n  moviesCatalog,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(\n      thunk,\n    )\n  )\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nconst Index = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}